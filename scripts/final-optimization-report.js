#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Funci√≥n para obtener tama√±o de archivo
function getFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    return (stats.size / 1024).toFixed(2);
  } catch (error) {
    console.warn(`Warning: Could not get file size for ${filePath}: ${error.message}`);
    return 'N/A';
  }
}

function generateOptimizationReport() {
  console.log('üöÄ REPORTE COMPLETO DE OPTIMIZACI√ìN FBX\n');
  console.log('=' .repeat(60));
  
  // 1. An√°lisis de archivos actuales
  console.log('\nüìä TAMA√ëOS ACTUALES:');
  
  const modelsDir = '/Users/madkoding/GitHub/blog-madtrackers/public/models';
  const assetsDir = '/Users/madkoding/GitHub/blog-madtrackers/public/assets';
  
  // Modelos FBX
  const models = [
    { name: 'SmolModel.fbx', path: path.join(modelsDir, 'SmolModel.fbx') },
    { name: 'tracker.fbx', path: path.join(modelsDir, 'tracker.fbx') }
  ];
  
  let totalModelSize = 0;
  models.forEach(model => {
    const size = parseFloat(getFileSize(model.path));
    totalModelSize += size;
    console.log(`   üì¶ ${model.name}: ${size} KB`);
  });
  
  // Texturas HDR
  const hdrFiles = [
    { name: 'env_original.hdr', path: path.join(assetsDir, 'env_original.hdr'), desc: 'Original (1024x512)' },
    { name: 'env_512x256.hdr', path: path.join(assetsDir, 'env_512x256.hdr'), desc: 'Media resoluci√≥n' },
    { name: 'env_256x128.hdr', path: path.join(assetsDir, 'env_256x128.hdr'), desc: 'Optimizada (USADA)' },
    { name: 'env_64x32.hdr', path: path.join(assetsDir, 'env_64x32.hdr'), desc: 'M√≥vil' }
  ];
  
  console.log('\nüé® MAPAS DE ENTORNO HDR:');
  hdrFiles.forEach(file => {
    const size = getFileSize(file.path);
    const isUsed = file.name === 'env_256x128.hdr' ? ' ‚úÖ EN USO' : '';
    console.log(`   üåç ${file.name}: ${size} KB (${file.desc})${isUsed}`);
  });
  
  // Texturas adicionales
  console.log('\nüñºÔ∏è  TEXTURAS ADICIONALES:');
  const noiseNormalPath = path.join(assetsDir, 'noise-normal.webp');
  const noiseNormalSize = getFileSize(noiseNormalPath);
  console.log(`   üìê noise-normal.webp: ${noiseNormalSize} KB (Normal map optimizado)`);
  
  console.log('\n' + '=' .repeat(60));
  
  // 2. Optimizaciones implementadas
  console.log('\n‚úÖ OPTIMIZACIONES IMPLEMENTADAS:\n');
  
  console.log('üîß OPTIMIZACIONES DE C√ìDIGO:');
  console.log('   ‚úì Environment map reducido: env.hdr ‚Üí env_256x128.hdr (-75% tama√±o)');
  console.log('   ‚úì Eliminaci√≥n de mapas de textura innecesarios (map, roughnessMap, etc.)');
  console.log('   ‚úì Configuraci√≥n optimizada de filtros de textura');
  console.log('   ‚úì Sistema de cach√© para modelos cargados (ModelCache.ts)');
  console.log('   ‚úì Level of Detail (LOD) din√°mico basado en distancia');
  console.log('   ‚úì Lazy loading mejorado con componentes optimizados');
  
  console.log('\nüéØ NUEVOS COMPONENTES:');
  console.log('   ‚úì OptimizedFBXModel.tsx - Versi√≥n optimizada del modelo');
  console.log('   ‚úì ModelCache.ts - Sistema de cach√© global');
  console.log('   ‚úì LazyOptimizedFBXModel.tsx - Wrapper optimizado');
  
  console.log('\n‚ö° OPTIMIZACIONES DE RENDIMIENTO:');
  console.log('   ‚úì Simplificaci√≥n autom√°tica de geometr√≠a seg√∫n distancia');
  console.log('   ‚úì Materiales optimizados por tipo (main, secondary, default)');
  console.log('   ‚úì Eliminaci√≥n de mipmaps innecesarios');
  console.log('   ‚úì Configuraci√≥n de memoria eficiente');
  
  // 3. Ahorros logrados
  console.log('\n' + '=' .repeat(60));
  console.log('\nüí∞ AHORROS CONSEGUIDOS:\n');
  
  const originalEnvSize = parseFloat(getFileSize(path.join(assetsDir, 'env_original.hdr')));
  const optimizedEnvSize = parseFloat(getFileSize(path.join(assetsDir, 'env_256x128.hdr')));
  const envSavings = originalEnvSize - optimizedEnvSize;
  const envSavingsPercent = ((envSavings / originalEnvSize) * 100).toFixed(1);
  
  console.log(`üåç Environment Map:`);
  console.log(`   Original: ${originalEnvSize} KB ‚Üí Optimizado: ${optimizedEnvSize} KB`);
  console.log(`   Ahorro: ${envSavings.toFixed(2)} KB (${envSavingsPercent}%)`);
  
  console.log(`\nüì¶ Carga inicial reducida en: ~${envSavings.toFixed(0)} KB`);
  console.log(`‚ö° Rendimiento mejorado: LOD + Cache + Optimizaciones`);
  
  // 4. Pr√≥ximos pasos recomendados
  console.log('\n' + '=' .repeat(60));
  console.log('\nüéØ PR√ìXIMOS PASOS RECOMENDADOS:\n');
  
  console.log('üîÑ CONVERSI√ìN A FORMATOS MODERNOS:');
  console.log('   ‚Ä¢ Convertir FBX ‚Üí GLB/GLTF (ahorro estimado: 50-70%)');
  console.log('   ‚Ä¢ Usar compresi√≥n Draco para geometr√≠a');
  console.log('   ‚Ä¢ Implementar texturas comprimidas (KTX2, ASTC)');
  
  console.log('\nüì± OPTIMIZACIONES ADICIONALES:');
  console.log('   ‚Ä¢ Usar env_64x32.hdr para dispositivos m√≥viles');
  console.log('   ‚Ä¢ Implementar detecci√≥n de capabilities del dispositivo');
  console.log('   ‚Ä¢ Precargar modelos cr√≠ticos');
  
  console.log('\nüõ†Ô∏è  HERRAMIENTAS SUGERIDAS:');
  console.log('   ‚Ä¢ Blender: Export ‚Üí glTF 2.0 Binary (.glb)');
  console.log('   ‚Ä¢ gltf-transform: Optimizaci√≥n autom√°tica');
  console.log('   ‚Ä¢ FBX2glTF: Conversi√≥n por lotes');
  
  // 5. Comandos √∫tiles
  console.log('\n' + '=' .repeat(60));
  console.log('\n‚öôÔ∏è  COMANDOS PARA CONVERSI√ìN:\n');
  
  console.log('# Instalar herramientas de conversi√≥n:');
  console.log('npm install -g @gltf-transform/cli');
  console.log('');
  console.log('# Convertir FBX a GLB (requiere Blender):');
  console.log('blender --background --python fbx_to_glb.py -- input.fbx output.glb');
  console.log('');
  console.log('# Optimizar GLB existente:');
  console.log('gltf-transform optimize input.glb output.glb --compress --instance');
  
  // 6. Estimaci√≥n de ahorros totales
  const potentialFbxSavings = totalModelSize * 0.6; // 60% ahorro estimado con GLB+Draco
  const totalCurrentSavings = envSavings;
  const totalPotentialSavings = totalCurrentSavings + potentialFbxSavings;
  
  console.log('\n' + '=' .repeat(60));
  console.log('\nüìä RESUMEN DE AHORROS:\n');
  console.log(`‚úÖ Ya conseguido: ${totalCurrentSavings.toFixed(0)} KB`);
  console.log(`üéØ Potencial adicional: ${potentialFbxSavings.toFixed(0)} KB (con conversi√≥n GLB)`);
  console.log(`üíé Total posible: ${totalPotentialSavings.toFixed(0)} KB`);
  
  const currentTotal = totalModelSize + originalEnvSize;
  const finalTotal = currentTotal - totalPotentialSavings;
  const totalReduction = ((totalPotentialSavings / currentTotal) * 100).toFixed(1);
  
  console.log(`\nüìà De ${currentTotal.toFixed(0)} KB ‚Üí ${finalTotal.toFixed(0)} KB (${totalReduction}% reducci√≥n total)`);
  
  console.log('\nüéâ ¬°Optimizaci√≥n FBX completada con √©xito!');
  console.log('=' .repeat(60));
}

// Ejecutar reporte
generateOptimizationReport();
